// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String     @id @default(uuid())
  name       String
  userId     String
  brands     Brand[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  products   Product[]
  discount   Discount[]
  orders     Order[]    @relation("StoreToOrder")
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name       String
  desc       String
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String
  brand      Brand       @relation(fields: [brandId], references: [id])
  brandId    String
  images     Image[]
  variants   Variant[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  OrderItem  OrderItem[]
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Brand {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  variants  Variant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  variants  Variant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Discount {
  id         String    @id @default(uuid())
  storeId    String
  store      Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name       String
  percentage Decimal
  variants   Variant[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Variant {
  id         String    @id @default(uuid())
  price      Decimal
  stock      Int
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  sizeId     String?
  size       Size?     @relation(fields: [sizeId], references: [id])
  colorId    String?
  color      Color?    @relation(fields: [colorId], references: [id])
  discountId String?
  discount   Discount? @relation(fields: [discountId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  storeId    String
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  email      String
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
